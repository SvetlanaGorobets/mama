const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
const randomNumber = getRandomNumber();

kiwi - false
const getRandomSubset = (array, size) => array.slice(0, size);
for (let i = 0; i < getRandomNumber(); i++) { console.log(getRandomString()); }
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
const reverseString = str => str.split("").reverse().join("");
apple

function addNumbers(a, b) { return a + b; }
true / kiwi
const getRandomSubset = (array, size) => array.slice(0, size);
const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
grape + apple
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
grape

const isEven = num => num % 2 === 0;
const greet = name => `Hello, ${name}!`;

const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
const fetchData = async url => { const response = await fetch(url); return response.json(); }
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);

66 + true
const getUniqueValues = array => [...new Set(array)];

grape + false
const reverseWords = str => str.split(" ").reverse().join(" ");

const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);

banana

const getUniqueCharacters = str => Array.from(new Set(str)).join("");
const isEven = num => num % 2 === 0;
const deepClone = obj => JSON.parse(JSON.stringify(obj));
const isEven = num => num % 2 === 0;

let result = performOperation(getRandomNumber(), getRandomNumber());
const getRandomSubset = (array, size) => array.slice(0, size);
